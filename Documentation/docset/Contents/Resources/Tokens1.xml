<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/APPromise.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/APPromise</TokenIdentifier>
			<Abstract type="html">Basic promise non-mutable class. Useful to create a public interfaces with promises.</Abstract>
			<DeclaredIn>APPromise.h</DeclaredIn>
            
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APPromise/setName:</TokenIdentifier>
			<Abstract type="html">Set a name to distinguish one promise from another (i.e. while debugging).</Abstract>
			<DeclaredIn>APPromise.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APPromise/name</TokenIdentifier>
			<Abstract type="html">Set a name to distinguish one promise from another (i.e. while debugging).</Abstract>
			<DeclaredIn>APPromise.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APPromise/name</TokenIdentifier>
			<Abstract type="html">Set a name to distinguish one promise from another (i.e. while debugging).</Abstract>
			<DeclaredIn>APPromise.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APPromise/state</TokenIdentifier>
			<Abstract type="html">Returns promise&apos;s current state. Thread-safe.</Abstract>
			<DeclaredIn>APPromise.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/c/tdef/APPromiseState</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (APPromiseState)state</Declaration>
			
			
			<Anchor>//api/name/state</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APPromise/value</TokenIdentifier>
			<Abstract type="html">Returns promise&apos;s fulfillment value (nil if still pending or rejected). Thread-safe.</Abstract>
			<DeclaredIn>APPromise.h</DeclaredIn>
			
			<Declaration>- (id)value</Declaration>
			
			<ReturnValue><Abstract type="html">Returns promise&apos;s fulfillment value (nil if still pending or rejected). Thread-safe.</Abstract></ReturnValue>
			<Anchor>//api/name/value</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APPromise/reason</TokenIdentifier>
			<Abstract type="html">Returns promise&apos;s rejection reason (nil if still pending or fulfilled). Thread-safe.</Abstract>
			<DeclaredIn>APPromise.h</DeclaredIn>
			
			<Declaration>- (id)reason</Declaration>
			
			<ReturnValue><Abstract type="html">Returns promise&apos;s rejection reason (nil if still pending or fulfilled). Thread-safe.</Abstract></ReturnValue>
			<Anchor>//api/name/reason</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/APPromise/promiseFulfilledWithValue:</TokenIdentifier>
			<Abstract type="html">Creates an already fulfilled promise.</Abstract>
			<DeclaredIn>APPromise+Mutator.h</DeclaredIn>
			
			<Declaration>+ (instancetype)promiseFulfilledWithValue:(id)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">Fulfillment value</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/promiseFulfilledWithValue:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/APPromise/promiseRejectedWithReason:</TokenIdentifier>
			<Abstract type="html">Creates an already rejected promise.</Abstract>
			<DeclaredIn>APPromise+Mutator.h</DeclaredIn>
			
			<Declaration>+ (instancetype)promiseRejectedWithReason:(id)reason</Declaration>
			<Parameters>
				<Parameter>
					<Name>reason</Name>
					<Abstract type="html">Rejection reason.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/promiseRejectedWithReason:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APPromise/fulfillWithValue:</TokenIdentifier>
			<Abstract type="html">Fulfills promise with a value.</Abstract>
			<DeclaredIn>APPromise+Mutator.h</DeclaredIn>
			
			<Declaration>- (void)fulfillWithValue:(id)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">Fulfillment value.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fulfillWithValue:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APPromise/rejectWithReason:</TokenIdentifier>
			<Abstract type="html">Rejects promise with a reason.</Abstract>
			<DeclaredIn>APPromise+Mutator.h</DeclaredIn>
			
			<Declaration>- (void)rejectWithReason:(id)reason</Declaration>
			<Parameters>
				<Parameter>
					<Name>reason</Name>
					<Abstract type="html">Rejection reason.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/rejectWithReason:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/APPromise/promise</TokenIdentifier>
			<Abstract type="html">Creates and returns a pending promise.</Abstract>
			<DeclaredIn>APPromise.h</DeclaredIn>
			
			<Declaration>+ (instancetype)promise</Declaration>
			
			
			<Anchor>//api/name/promise</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/APPromise/promiseWithName:</TokenIdentifier>
			<Abstract type="html">Same as promise, but also sets a name.</Abstract>
			<DeclaredIn>APPromise.h</DeclaredIn>
			
			<Declaration>+ (instancetype)promiseWithName:(NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">See name.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/promiseWithName:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APPromise/isPending</TokenIdentifier>
			<Abstract type="html">Check if promise is pending.</Abstract>
			<DeclaredIn>APPromise.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/APPromise/state</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BOOL)isPending</Declaration>
			
			<ReturnValue><Abstract type="html">Returns YES if still pending.</Abstract></ReturnValue>
			<Anchor>//api/name/isPending</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APPromise/isFulfilled</TokenIdentifier>
			<Abstract type="html">Check if promise is fulfilled.</Abstract>
			<DeclaredIn>APPromise.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/APPromise/state</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BOOL)isFulfilled</Declaration>
			
			<ReturnValue><Abstract type="html">Returns YES if fulfilled with value.</Abstract></ReturnValue>
			<Anchor>//api/name/isFulfilled</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APPromise/isRejected</TokenIdentifier>
			<Abstract type="html">Check if promise is rejected.</Abstract>
			<DeclaredIn>APPromise.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/APPromise/state</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BOOL)isRejected</Declaration>
			
			<ReturnValue><Abstract type="html">Returns YES if rejected with reason.</Abstract></ReturnValue>
			<Anchor>//api/name/isRejected</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
        
	</File>
</Tokens>