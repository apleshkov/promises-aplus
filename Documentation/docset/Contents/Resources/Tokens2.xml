<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Protocols/APPromise.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intf/APPromise</TokenIdentifier>
			<Abstract type="html">Basic promise protocol.
You can create your own promise, which could be returned, for example, from fulfill/reject handlers.</Abstract>
			<DeclaredIn>APPromise.h</DeclaredIn>
            
			
			<NodeRef refid="2"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APPromise/thenUseDispatchQueue:ifFulfilled:rejected:</TokenIdentifier>
			<Abstract type="html">Primary method for interaction with a promise. See this for more info.</Abstract>
			<DeclaredIn>APPromise.h</DeclaredIn>
			
			<Declaration>- (id&lt;APPromise&gt;)thenUseDispatchQueue:(dispatch_queue_t)queue ifFulfilled:(APPromiseFulfillBlock)fulfilled rejected:(APPromiseRejectBlock)rejected</Declaration>
			<Parameters>
				<Parameter>
					<Name>queue</Name>
					<Abstract type="html">A dispatch queue to which provided blocks will be submitted. Passing NULL is the same as passing dispatchgetmain_queue().</Abstract>
				</Parameter><Parameter>
					<Name>fulfilled</Name>
					<Abstract type="html">Optional parameter.

      typedef id(^APPromiseFulfillBlock)(id value);

Passing nil is the same as passing

      ^id(id value) { return value; }
      </Abstract>
				</Parameter><Parameter>
					<Name>rejected</Name>
					<Abstract type="html">Optional parameter.

      typedef id(^APPromiseRejectBlock)(id reason);

Passing nil is the same as passing

      ^id(id reason) { return reason; }</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/thenUseDispatchQueue:ifFulfilled:rejected:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
        
	</File>
</Tokens>